import { Box, Chip, Container, Grid } from "@material-ui/core";
import { useRouter } from "next/router";
import React, { useState } from "react";
import { Controller } from "react-hook-form";
import { Alert } from "@material-ui/lab";
import AppDivider from "src/components/elements/Divider";
import AppSelect from "src/components/elements/Select";
import AppSwitch from "src/components/elements/Switch";
import AppTextField from "src/components/elements/TextField";
import AppTooltip from "src/components/elements/Tooltip";
import AppTypography from "src/components/elements/Typography";
import ActionButtonGroup from "src/components/modules/ButtonGroup";
import { useScreenSizeDown } from "src/hooks/screenSize";
import { ListingStepNavigate } from "src/types/listing";
import { buildListingPath } from "src/utils";
import { useAddListingContext } from "src/context";
import { addBasicPricing, updateBasicPricing } from "src/services/api";
import { currencies, rateFields } from "./data";
import { useStyles } from "./styles";

const { back, next }: ListingStepNavigate = {
  next: { section: "basic-fee", step: "three" },
  back: { section: "rental-parameters", step: "three" },
};

const BasicPricing: React.FC = () => {
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const classes = useStyles();
  const router = useRouter();
  const isSmallSizeDown = useScreenSizeDown("sm");

  const disableGutters = isSmallSizeDown ? false : true;
  const maxWidth = "sm" as const;

  const { form } = useAddListingContext();
  const { control, watch, getValues, setValue, register } = form;

  const disabled = !watch([
    "basic_pricing.currency",
    "basic_pricing.base_rate",
    "basic_pricing.weekend_rate",
    "basic_pricing.weekly_rate",
    "basic_pricing.monthly_rate"
  ]).every(
    Boolean
  ) || loading;

  const onNext = () => {
    const property = getValues();
    const basicPricing = getValues('basic_pricing');

    setError(null);
    setLoading(true);
    if (basicPricing.id) {
      updateBasicPricing(basicPricing)
        .then(() => {
          router.push(buildListingPath(next));
        })
        .catch ((ex) => {
          const error = ex.response?.data;
          if (error) {
            setError(error.message);
          } else {
            setError(ex.message);
          }
        })
        .finally(() => setLoading(false));
    } else {
      addBasicPricing({basicPricing, propertyId: property.id})
        .then(result => {
          setValue('basic_pricing', result.data);
          router.push(buildListingPath(next));
        })
        .catch ((ex) => {
          const error = ex.response?.data;
          if (error) {
            setError(error.message);
          } else {
            setError(ex.message);
          }
        })
        .finally(() => setLoading(false));
    }
  }

  return (
    <>
      <Container
        disableGutters={disableGutters}
        maxWidth={maxWidth}
        className={classes.root}
      >
        <AppTypography
          component="h2"
          neutralColor={900}
          style={{ marginBottom: "24px" }}
          variant="displayMedium"
        >
          Basic pricing
        </AppTypography>
        <Box className={classes.verticalFlexWrapper}>
          <Box className={classes.horizontalFlexWrapper}>
            <AppTypography neutralColor={800} variant="action">
              Smart pricing
            </AppTypography>
            <AppTooltip
              title={
                <AppTypography
                  style={{ textAlign: "center" }}
                  variant="caption"
                  color="inherit"
                >
                  Minimum number of nights to book depending on the day of the
                  start of the stay.
                </AppTypography>
              }
            />
            <Chip
              color="primary"
              variant="outlined"
              label={
                <AppTypography color="primary" variant="caption">
                  Coming Soon
                </AppTypography>
              }
            />
            <AppSwitch label={null} className={classes.switch} />
          </Box>
          <AppTypography neutralColor={500} variant="body">
            By activating smart pricing, you automatically increase the income
            that can be generated by your property during key periods.
          </AppTypography>
        </Box>
        <Controller
          name="basic_pricing.currency"
          control={control}
          render={({ field: { ...others } }) => (
            <AppSelect
              {...others}
              label="Currency"
              placeholder="CAD (C$)"
              withLabel
              options={currencies}
              description={
                <AppTypography
                  style={{ marginTop: "8px" }}
                  neutralColor={400}
                  variant="caption"
                >
                  Choose a currency to indicate your prices
                </AppTypography>
              }
            />
          )}
        />
        <Grid className={classes.gridContainer} spacing={4} container>
          {React.Children.toArray(
            rateFields.map(({ description, name, ...otherFields }: any) => (
              <Grid item xs={12} sm={6}>
                <AppTextField
                  name={`basic_pricing.${name}`}
                  register={register}
                  {...otherFields}
                  description={
                    description && (
                      <AppTypography
                        style={{ marginTop: "8px" }}
                        neutralColor={400}
                        variant="caption"
                      >
                        {description}
                      </AppTypography>
                    )
                  }
                />
              </Grid>
            ))
          )}
        </Grid>
      </Container>
      <AppDivider />
      {error && (
        <Alert severity="error" style={{ marginBottom: "24px" }}>
          {error}
        </Alert>
      )}
      <ActionButtonGroup
        secondaryBtnProps={{
          onClick: () => router.push(buildListingPath(back)),
        }}
        primaryBtnProps={{
          disabled,
          onClick: onNext,
        }}
        containerProps={{
          maxWidth,
          disableGutters,
        }}
      />
    </>
  );
};

export default BasicPricing;
